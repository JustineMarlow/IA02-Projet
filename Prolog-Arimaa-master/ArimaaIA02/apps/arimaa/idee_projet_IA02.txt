prédicat possible_moves(+Board, -possible_moves_list) -> renvoie tous les mouvements possibles (sous la forme d'une liste) :
pour chacune des pièces on teste :
	pour chacune des cases adjacentes, si une pièce alliée s'y trouve, pas de freeze
					   sinon pour chacune des cases adjacentes si une pièce ennemie de valeur supérieure s'y trouve, aucun mouvement n'est possible (freeze)
	sinon pour chacune des cases adjacentes si une pièce s'y trouve, le mouvement est impossible
	si la pièce est un lapin, reculer est impossible
si le mouvement est possible, on l'ajoute à la liste possible_moves_list

prédicat generate_move(+possible_moves_list, -move, -Board) -> renvoie le mouvement avec l'heuristique la plus grande et la nouvelle configuration du plateau après le mouvement
(pour le moment, on prendre la premier mouvement possible)

prédicat heuristic(+move, -value) -> renvoie l'heuristique (pertinence) d'un mouvement
Repose sur
- victoire (arrivée d'un lapin sur la dernière ligne)
- capture d'une pièce ennemie
- avancée d'un lapin


get_moves([Move1,Move2,Move3,Move4], _, Board):- possible_moves(Board, Board, Possible_moves_list1),!,
						 generate_move(Board, Possible_moves_list1, Move1, Board1),!,
						 possible_moves(Board1, Board1, Possible_moves_list2),!,
						 generate_move(Board1, Possible_moves_list2, Move2, Board2),!,
						 possible_moves(Board2, Board2, Possible_moves_list3),!,
						 generate_move(Board2, Possible_moves_list3, Move3, Board3),!,
						 possible_moves(Board3, Board3, Possible_moves_list3),!,
						 generate_move(Board3, Possible_moves_list3, Move4, _).

in(X,[]):-fail.
in(X,[X|_]).
in(X,[T|Q]):-T\=X,in(X,Q).

adjacent(Lin1,Col1,Lin2,Col1):-Lin2 is Lin1+1.
adjacent(Lin1,Col1,Lin2,Col1):-Lin2 is Lin1-1.
adjacent(Lin1,Col1,Lin1,Col2):-Col2 is Col1+1.
adjacent(Lin1,Col1,Lin1,Col2):-Col2 is Col1-1.

cannot_freeze(B,[Lin1,Col1,_,silver]):-adjacent(Lin1,Col1,Lin2,Col2), in([Lin2,Col2,_,silver],B).

plus_fort(Y,rabbit):-Y\=rabbit.
plus_fort(Y,cat):-Y\=rabbit, Y\=cat.
plus_fort(Y,dog):-Y\=rabbit, Y\=cat, Y\=dog.
plus_fort(Y,horse):-Y\=rabbit, Y\=cat, Y\=dog, Y\=horse.
plus_fort(elephant,camel).

freeze(B,[Lin1,Col1,X,silver]):- \+cannot_freeze(B,[Lin1,Col1,X,silver]), adjacent(Lin1,Col1,Lin2,Col2), in([Lin2,Col2,Y,gold],B), plus_fort(Y,X).

en_avant(B,[Lin1,Col1,_,silver],[[Lin1,Col1],[Lin2,Col1]]):-Lin1<7, Lin2 is Lin1+1, \+in([Lin2,Col1,_,_],B).
en_arriere(B,[Lin1,Col1,Type,silver],[[Lin1,Col1],[Lin2,Col1]]):-Type\=rabbit, Lin1>0, Lin2 is Lin1-1, \+in([Lin2,Col1,_,_],B).
a_droite(B,[Lin1,Col1,_,silver],[[Lin1,Col1],[Lin1,Col2]]):-Col1<7, Col2 is Col1+1, \+in([Lin1,Col2,_,_],B).
a_gauche(B,[Lin1,Col1,_,silver],[[Lin1,Col1],[Lin1,Col2]]):-Col1<7, Col2 is Col1-1, \+in([Lin1,Col2,_,_],B).

possible_moves(_,[],_).
possible_moves(B,[T|Q],List):- \+freeze(B,T), en_avant(B,T,M),   \+in(M,List), possible_moves(B,[T|Q],[M|List]).
possible_moves(B,[T|Q],List):- \+freeze(B,T), en_arriere(B,T,M), \+in(M,List), possible_moves(B,[T|Q],[M|List]).
possible_moves(B,[T|Q],List):- \+freeze(B,T), a_droite(B,T,M),   \+in(M,List), possible_moves(B,[T|Q],[M|List]).
possible_moves(B,[T|Q],List):- \+freeze(B,T), a_gauche(B,T,M),   \+in(M,List), possible_moves(B,[T|Q],[M|List]).
possible_moves(B,[_|Q],List):-possible_moves(B,Q,List).

adjust_board([[[Lin1,Col1],[_,_]]|Q], [[Lin1,Col1],[Lin2,Col2]], [[[Lin1,Col1],[Lin2,Col2]]|Q]).
adjust_board([X|Q1], [[Lin1,Col1],[Lin2,Col2]], [X|Q2]):-adjust_board(Q1,[[Lin1,Col1],[Lin2,Col2]],Q2).

generate_move(BoardX,[T|_],T,BoardY):-adjust_board(BoardX,T,BoardY).

